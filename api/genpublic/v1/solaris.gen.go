// Package solarisapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package solarisapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// CreateLogRequest The request object to create log.
type CreateLogRequest struct {
	// Tags The log tags.
	Tags Tags `json:"tags"`
}

// CreateRecordRequest The request object to create a record.
type CreateRecordRequest struct {
	// Payload The record payload.
	Payload []byte `json:"payload"`
}

// CreateRecordsRequest The request object to create records.
type CreateRecordsRequest struct {
	// Records The list of records to be created.
	Records []CreateRecordRequest `json:"records"`
}

// DeleteLogsRequest The request object to delete logs.
type DeleteLogsRequest struct {
	// FilterCondition The filter condition.
	FilterCondition string `json:"filterCondition"`
}

// Log The log object.
type Log struct {
	// CreatedAt The timestamp when the log was created.
	CreatedAt time.Time `json:"createdAt"`

	// Id The log identifier.
	Id string `json:"id"`

	// Records The number of records in the log.
	Records int `json:"records"`

	// Tags The log tags.
	Tags Tags `json:"tags"`

	// UpdatedAt The timestamp when the log was updated (new records added or tags are applied).
	UpdatedAt time.Time `json:"updatedAt"`
}

// QueryLogsResult The response object to the query logs request.
type QueryLogsResult struct {
	// Items The list of found logs.
	Items []Log `json:"items"`

	// NextPageId The id of the next page.
	NextPageId *string `json:"nextPageId,omitempty"`

	// Total The total number of found logs.
	Total int `json:"total"`
}

// QueryRecordsResult The response object to the query records request.
type QueryRecordsResult struct {
	// Items The list of found records.
	Items []Record `json:"items"`

	// NextPageId The id of the next page.
	NextPageId *string `json:"nextPageId,omitempty"`

	// Total The total number of found records.
	Total int `json:"total"`
}

// Record The record object.
type Record struct {
	// CreatedAt The timestamp when the record was created.
	CreatedAt time.Time `json:"createdAt"`

	// Id The record identifier.
	Id string `json:"id"`

	// LogId The log identifier.
	LogId string `json:"logId"`

	// Payload The record payload.
	Payload []byte `json:"payload"`
}

// Tags The log tags.
type Tags map[string]string

// UpdateLogRequest The request object to update log.
type UpdateLogRequest struct {
	// Tags The log tags.
	Tags Tags `json:"tags"`
}

// Desc defines model for Desc.
type Desc = bool

// FromPageId defines model for FromPageId.
type FromPageId = string

// Limit defines model for Limit.
type Limit = int

// LogId defines model for LogId.
type LogId = string

// LogIds defines model for LogIds.
type LogIds = []string

// LogsCondFilter defines model for LogsCondFilter.
type LogsCondFilter = string

// RecordsCondFilter defines model for RecordsCondFilter.
type RecordsCondFilter = string

// QueryLogsParams defines parameters for QueryLogs.
type QueryLogsParams struct {
	// LogsCondFilter The condition for filtering the logs.
	LogsCondFilter *LogsCondFilter `form:"logsCondFilter,omitempty" json:"logsCondFilter,omitempty"`

	// FromPageId The id of the page to start returning the results from.
	FromPageId *FromPageId `form:"fromPageId,omitempty" json:"fromPageId,omitempty"`

	// Limit The max number of objects to return per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// QueryRecordsParams defines parameters for QueryRecords.
type QueryRecordsParams struct {
	// LogsCondFilter The condition for filtering the logs.
	LogsCondFilter *LogsCondFilter `form:"logsCondFilter,omitempty" json:"logsCondFilter,omitempty"`

	// RecordsCondFilter The condition for filtering the records.
	RecordsCondFilter *RecordsCondFilter `form:"recordsCondFilter,omitempty" json:"recordsCondFilter,omitempty"`

	// LogIds The ids of the logs to consider. If specified, the `logsCondFilter` is ignored.
	LogIds *LogIds `form:"logIds,omitempty" json:"logIds,omitempty"`

	// Desc The flag specifies the descending order for pagination.
	Desc *Desc `form:"desc,omitempty" json:"desc,omitempty"`

	// FromPageId The id of the page to start returning the results from.
	FromPageId *FromPageId `form:"fromPageId,omitempty" json:"fromPageId,omitempty"`

	// Limit The max number of objects to return per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// DeleteLogsJSONRequestBody defines body for DeleteLogs for application/json ContentType.
type DeleteLogsJSONRequestBody = DeleteLogsRequest

// CreateLogJSONRequestBody defines body for CreateLog for application/json ContentType.
type CreateLogJSONRequestBody = CreateLogRequest

// UpdateLogJSONRequestBody defines body for UpdateLog for application/json ContentType.
type UpdateLogJSONRequestBody = UpdateLogRequest

// CreateRecordsJSONRequestBody defines body for CreateRecords for application/json ContentType.
type CreateRecordsJSONRequestBody = CreateRecordsRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete logs
	// (DELETE /logs)
	DeleteLogs(c *gin.Context)
	// Query logs
	// (GET /logs)
	QueryLogs(c *gin.Context, params QueryLogsParams)
	// Create log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Update log
	// (PUT /logs/{logId})
	UpdateLog(c *gin.Context, logId LogId)
	// Create records
	// (POST /logs/{logId}/records)
	CreateRecords(c *gin.Context, logId LogId)
	// Health check
	// (GET /ping)
	Ping(c *gin.Context)
	// Query records
	// (GET /records)
	QueryRecords(c *gin.Context, params QueryRecordsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteLogs operation middleware
func (siw *ServerInterfaceWrapper) DeleteLogs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteLogs(c)
}

// QueryLogs operation middleware
func (siw *ServerInterfaceWrapper) QueryLogs(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryLogsParams

	// ------------- Optional query parameter "logsCondFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "logsCondFilter", c.Request.URL.Query(), &params.LogsCondFilter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logsCondFilter: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fromPageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromPageId", c.Request.URL.Query(), &params.FromPageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fromPageId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.QueryLogs(c, params)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateLog(c)
}

// UpdateLog operation middleware
func (siw *ServerInterfaceWrapper) UpdateLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "logId" -------------
	var logId LogId

	err = runtime.BindStyledParameter("simple", false, "logId", c.Param("logId"), &logId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateLog(c, logId)
}

// CreateRecords operation middleware
func (siw *ServerInterfaceWrapper) CreateRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "logId" -------------
	var logId LogId

	err = runtime.BindStyledParameter("simple", false, "logId", c.Param("logId"), &logId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateRecords(c, logId)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Ping(c)
}

// QueryRecords operation middleware
func (siw *ServerInterfaceWrapper) QueryRecords(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryRecordsParams

	// ------------- Optional query parameter "logsCondFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "logsCondFilter", c.Request.URL.Query(), &params.LogsCondFilter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logsCondFilter: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "recordsCondFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "recordsCondFilter", c.Request.URL.Query(), &params.RecordsCondFilter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recordsCondFilter: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "logIds" -------------

	err = runtime.BindQueryParameter("form", true, false, "logIds", c.Request.URL.Query(), &params.LogIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logIds: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "desc" -------------

	err = runtime.BindQueryParameter("form", true, false, "desc", c.Request.URL.Query(), &params.Desc)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter desc: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fromPageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromPageId", c.Request.URL.Query(), &params.FromPageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fromPageId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.QueryRecords(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/logs", wrapper.DeleteLogs)

	router.GET(options.BaseURL+"/logs", wrapper.QueryLogs)

	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)

	router.PUT(options.BaseURL+"/logs/:logId", wrapper.UpdateLog)

	router.POST(options.BaseURL+"/logs/:logId/records", wrapper.CreateRecords)

	router.GET(options.BaseURL+"/ping", wrapper.Ping)

	router.GET(options.BaseURL+"/records", wrapper.QueryRecords)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RZT2/buBP9KgR/v8MuoLXdbU++tQmKLZBDmk1PRYAy4khmVyIVkmpqBP7uiyH1h7Io",
	"W4mToHsKLJHDN/Nm3gyVB5qqslISpDV0/UArplkJFrT7dQ4mxb8cTKpFZYWSdE2vN0CyguXEVJCKTIAh",
	"dgMEF4HkQuZEaQ6aZEqTiuVCMty4oAkVuP2uBr2lCZWsBLp2tmlCTbqBkuFhdlvh81ulCmCS7nYJ/ahV",
	"ecly+MTjaAQnKnMgKpYDsYoYy7QlGmytJSLCdxpMXVhDMq3KKTRZf1IEk7FayNxBuhClsHE0JftJZF3e",
	"gkZU6vY7pNYgKA+HVODiAlMYCmc6cryQFnLQ/nyVT0WjUDkRHKRFbnR3SsXsJjjE7U+ohrtaaOB0bXUN",
	"R3zGPWaKAtNyUKjcuZsqaQQHvSCfsi5XeOLWfMNFZ0ryj6KwoL8RYYjIpdLAJ8PiTw8hCguliWBN2gdM",
	"a7ZtsQfnxX1IleQCf7vUzdzKNnkQ7wFkoe3DQbyCVGl+EhbtTUzB0aMTDiHatS9dIM80MAsXKr+CuxrM",
	"RIZr/7LJbce124dRQlSVVhVoK8CTw3L39/8aMrqm/1v2krNsjl5e4xrE0ufjV7/xpiPTn4bsepQ+kk8D",
	"ypogjtFWbFsoxqfs4SbSrMHNmdIls6hXWws0iRAeetQaP+aUeZpXQWIMnWpeTOiFQFtZuxvt3UJj0ldj",
	"W2aHGIxxEivEMBwtrFg4zqEAl4mPjQV3G7uCHQbCF9JZW1wTzc0t6ktwcZTXfbMxhy5UPq3XftkYb8PC",
	"+wnvrSjBWFZW5H4DshUqcs9MyF+Xo5xZ+AP3jB1KqJjdTkZbD6ZX3wrbBBMd0sBa19ySRwhGQuuKPzFA",
	"zU7ym4T7DhrjHDhRmiAGwjQQVlWFAP773EDuZYbAJusc6sOUBLSGHsSy5jNqu68CnF6misBUShoIqgA9",
	"dX3Bt+OmTMYJ1tX2tC5kqpa8b4BzxABzfVT8CZXw086b43BlNySNu7uyrJggHF8FOTcEHxmkBmQ531r7",
	"k3R0Gv1ERtpkO52UcBKYw4tH/ktRE7hwMjuNe4da9/MJbWPwWbW2sXlEbovHzP6j3S864Di5a+8W7Umh",
	"3sVou270nnHfPllxORwg912I+40qG3jc2//iFPbxQ61X5tcZanGZkJlytoUt8N3fqmBamPMP5P3lJ5rQ",
	"H6CNx/tmsVqs0DVVgWSVoGv6drFavHVBtxuHbImi513FgWjs9PlwUELv3E0dcysYv5pLIhj7QfGtqxUl",
	"LUgXRtcdU7dt+d34gaq/axwKzni+2w1DhfdR98ArqXPlz9W7ybw3pGQ23bSXpP0hjtyDhmY45AtHi6nL",
	"kuntMBQY1RwiOfK566bjaHVd2hHQf0L5Go9Bv2S5dy/dJUd3BB9DZqz23yl2N6NArp6Nyf0RxfE4psj3",
	"PpRLU6cpGJPVxT4PfYydUqlYrZ4NrppDHrrr6wsl7eh6PCtn3zzb+W6u2k0q4KAXDSPbR829cOKwfHBK",
	"vXPX3joS6i8DARyGuhPVp6Q85u7Ny1A0EvtZFK1ek6Jm4l9gjr87oGhusVTWT0r7jPbkjBldBjeyg1UU",
	"TF+xSrrqbiy/EsXRLyXzK3Fq6jG+RfQFdAo7w/h6hiocX9YP8fZytoH0HyL8jG1A/wBNBOYKYTgl11IK",
	"GSnDS7R5YjpHPgmOPUbwR9T7L2CF3ZAUPfEeB2l4oKdOJmF423qFzjr+NDunwfrP0jNWuv+m/Gcb/PDS",
	"e3KP7wtjt/s3AAD//y33hbmFGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
