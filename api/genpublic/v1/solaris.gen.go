// Package solarisapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package solarisapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// CreateLogRequest The request object to create log.
type CreateLogRequest struct {
	// Tags The log tags.
	Tags Tags `json:"tags"`
}

// CreateRecordRequest The request object to create a record.
type CreateRecordRequest struct {
	// Payload The record payload.
	Payload []byte `json:"payload"`
}

// CreateRecordsRequest The request object to create records.
type CreateRecordsRequest struct {
	// Records The list of records to be created.
	Records []CreateRecordRequest `json:"records"`
}

// CreateRecordsResponse The response object to the create records request.
type CreateRecordsResponse struct {
	// Added The number of records added.
	Added int `json:"added"`
}

// DeleteLogsRequest The request object to delete logs.
type DeleteLogsRequest struct {
	// FilterCondition The filter condition.
	FilterCondition string `json:"filterCondition"`
}

// DeleteLogsResponse The response object to the delete logs request.
type DeleteLogsResponse struct {
	// Deleted The number of logs deleted.
	Deleted int `json:"deleted"`
}

// Log The log object.
type Log struct {
	// CreatedAt The timestamp when the log was created.
	CreatedAt time.Time `json:"createdAt"`

	// Id The log identifier.
	Id string `json:"id"`

	// Tags The log tags.
	Tags Tags `json:"tags"`

	// UpdatedAt The timestamp when the log was updated (new records added or tags are applied).
	UpdatedAt time.Time `json:"updatedAt"`
}

// QueryLogsResult The response object to the query logs request.
type QueryLogsResult struct {
	// Items The list of found logs.
	Items []Log `json:"items"`

	// NextPageId The id of the next page.
	NextPageId *string `json:"nextPageId,omitempty"`

	// Total The total number of found logs.
	Total int `json:"total"`
}

// QueryRecordsResult The response object to the query records request.
type QueryRecordsResult struct {
	// Items The list of found records.
	Items []Record `json:"items"`

	// NextPageId The id of the next page.
	NextPageId *string `json:"nextPageId,omitempty"`

	// Total The total number of found records.
	Total int `json:"total"`
}

// Record The record object.
type Record struct {
	// CreatedAt The timestamp when the record was created.
	CreatedAt time.Time `json:"createdAt"`

	// Id The record identifier.
	Id string `json:"id"`

	// LogId The log identifier.
	LogId string `json:"logId"`

	// Payload The record payload.
	Payload []byte `json:"payload"`
}

// Tags The log tags.
type Tags map[string]string

// UpdateLogRequest The request object to update log.
type UpdateLogRequest struct {
	// Tags The log tags.
	Tags Tags `json:"tags"`
}

// Desc defines model for Desc.
type Desc = bool

// FromPageId defines model for FromPageId.
type FromPageId = string

// Limit defines model for Limit.
type Limit = int

// LogId defines model for LogId.
type LogId = string

// LogIds defines model for LogIds.
type LogIds = []string

// LogsCondFilter defines model for LogsCondFilter.
type LogsCondFilter = string

// RecordsCondFilter defines model for RecordsCondFilter.
type RecordsCondFilter = string

// QueryLogsParams defines parameters for QueryLogs.
type QueryLogsParams struct {
	// LogsCondFilter The condition for filtering the logs.
	LogsCondFilter *LogsCondFilter `form:"logsCondFilter,omitempty" json:"logsCondFilter,omitempty"`

	// FromPageId The id of the page to start returning the results from.
	FromPageId *FromPageId `form:"fromPageId,omitempty" json:"fromPageId,omitempty"`

	// Limit The max number of objects to return per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// QueryRecordsParams defines parameters for QueryRecords.
type QueryRecordsParams struct {
	// LogsCondFilter The condition for filtering the logs.
	LogsCondFilter *LogsCondFilter `form:"logsCondFilter,omitempty" json:"logsCondFilter,omitempty"`

	// RecordsCondFilter The condition for filtering the records.
	RecordsCondFilter *RecordsCondFilter `form:"recordsCondFilter,omitempty" json:"recordsCondFilter,omitempty"`

	// LogIds The ids of the logs to consider. If specified, the `logsCondFilter` is ignored.
	LogIds *LogIds `form:"logIds,omitempty" json:"logIds,omitempty"`

	// Desc The flag specifies the descending order for pagination.
	Desc *Desc `form:"desc,omitempty" json:"desc,omitempty"`

	// FromPageId The id of the page to start returning the results from.
	FromPageId *FromPageId `form:"fromPageId,omitempty" json:"fromPageId,omitempty"`

	// Limit The max number of objects to return per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// DeleteLogsJSONRequestBody defines body for DeleteLogs for application/json ContentType.
type DeleteLogsJSONRequestBody = DeleteLogsRequest

// CreateLogJSONRequestBody defines body for CreateLog for application/json ContentType.
type CreateLogJSONRequestBody = CreateLogRequest

// UpdateLogJSONRequestBody defines body for UpdateLog for application/json ContentType.
type UpdateLogJSONRequestBody = UpdateLogRequest

// CreateRecordsJSONRequestBody defines body for CreateRecords for application/json ContentType.
type CreateRecordsJSONRequestBody = CreateRecordsRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete logs
	// (DELETE /logs)
	DeleteLogs(c *gin.Context)
	// Query logs
	// (GET /logs)
	QueryLogs(c *gin.Context, params QueryLogsParams)
	// Create log
	// (POST /logs)
	CreateLog(c *gin.Context)
	// Update log
	// (PUT /logs/{logId})
	UpdateLog(c *gin.Context, logId LogId)
	// Create records
	// (POST /logs/{logId}/records)
	CreateRecords(c *gin.Context, logId LogId)
	// Health check
	// (GET /ping)
	Ping(c *gin.Context)
	// Query records
	// (GET /records)
	QueryRecords(c *gin.Context, params QueryRecordsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteLogs operation middleware
func (siw *ServerInterfaceWrapper) DeleteLogs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteLogs(c)
}

// QueryLogs operation middleware
func (siw *ServerInterfaceWrapper) QueryLogs(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryLogsParams

	// ------------- Optional query parameter "logsCondFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "logsCondFilter", c.Request.URL.Query(), &params.LogsCondFilter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logsCondFilter: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fromPageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromPageId", c.Request.URL.Query(), &params.FromPageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fromPageId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryLogs(c, params)
}

// CreateLog operation middleware
func (siw *ServerInterfaceWrapper) CreateLog(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateLog(c)
}

// UpdateLog operation middleware
func (siw *ServerInterfaceWrapper) UpdateLog(c *gin.Context) {

	var err error

	// ------------- Path parameter "logId" -------------
	var logId LogId

	err = runtime.BindStyledParameter("simple", false, "logId", c.Param("logId"), &logId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateLog(c, logId)
}

// CreateRecords operation middleware
func (siw *ServerInterfaceWrapper) CreateRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "logId" -------------
	var logId LogId

	err = runtime.BindStyledParameter("simple", false, "logId", c.Param("logId"), &logId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRecords(c, logId)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Ping(c)
}

// QueryRecords operation middleware
func (siw *ServerInterfaceWrapper) QueryRecords(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryRecordsParams

	// ------------- Optional query parameter "logsCondFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "logsCondFilter", c.Request.URL.Query(), &params.LogsCondFilter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logsCondFilter: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "recordsCondFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "recordsCondFilter", c.Request.URL.Query(), &params.RecordsCondFilter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recordsCondFilter: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "logIds" -------------

	err = runtime.BindQueryParameter("form", true, false, "logIds", c.Request.URL.Query(), &params.LogIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter logIds: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "desc" -------------

	err = runtime.BindQueryParameter("form", true, false, "desc", c.Request.URL.Query(), &params.Desc)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter desc: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fromPageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromPageId", c.Request.URL.Query(), &params.FromPageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fromPageId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryRecords(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/logs", wrapper.DeleteLogs)
	router.GET(options.BaseURL+"/logs", wrapper.QueryLogs)
	router.POST(options.BaseURL+"/logs", wrapper.CreateLog)
	router.PUT(options.BaseURL+"/logs/:logId", wrapper.UpdateLog)
	router.POST(options.BaseURL+"/logs/:logId/records", wrapper.CreateRecords)
	router.GET(options.BaseURL+"/ping", wrapper.Ping)
	router.GET(options.BaseURL+"/records", wrapper.QueryRecords)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RZT2/buBP9KgR/v8MuoLXdbU++tQmKLdBD2m1PRYEy4khmVyIVkmpqBP7uiyEli7JI",
	"W3H+oHsKEpHDN/Nm3gyZO5qrulESpDV0fUcbplkNFrT77RJMjj85mFyLxgol6Zp+2gApKlYS00AuCgGG",
	"2A0QXASSC1kSpTloUihNGlYKyXDjgmZU4PabFvSWZlSyGuja2aYZNfkGaoaH2W2Df79WqgIm6W6X0bda",
	"1VeshHc8jkZwogoHomElEKuIsUxbosG2WiIi/KbBtJU1pNCqTqEphpMimIzVQpYO0ntRCxtHU7OfRLb1",
	"NWhEpa6/Q24NgvJwSAMuLpDCUDnTkeOFtFCC9uerMhWNSpVEcJAWudH7UxpmN8Ehbn9GNdy0QgOna6tb",
	"OOEz7jEpCkzPQaVK526upBEc9IK8K/a5wjO35hsuulCSvxWVBf2NCENEKZUGngyLPz2EKCzUJoI16//A",
	"tGbbHntwXtyHXEku8HeXuoVb2ScP4j2CLLR9PIgfIVeaPwiL9iZScPTkhGOIdv1HF8gLDczCe1V+hJsW",
	"TCLDtf/Y5bbj2u3DKCGqRqsGtBXgyWGl+/l/DQVd0/8tB8lZdkcvP+EaxDLk4xe/8eueTH8asutR+kie",
	"B5R1QZyibdi2Uoyn7OEm0q3BzYXSNbOoV1sLNIsQHnrUGz/llDnPqyAxxk51HxJ6IdBW0e9Ge9fQmfTV",
	"2JfZMQZjnMQKMQxHD2tGOEyjpIFUPPzXICBYJuOg9FGbBodxDgm+BxnvrbjFi4HoUJND17zRmGOXUIEr",
	"sfuSzN3GvRKNnfAKcdGrRqJru0WDtixOJuyh2VMOnUFT4FaaI7/oJEvOSLd2Bkm91ZhX71WZbq9+2RRm",
	"VzSvE5xaUYOxrG7I7QZk31fILTNhue0lhTMLf+CeKU0ZFbO7/7Q5zhbkjLYNP9Ojbif5TcLtuHyI0gQx",
	"EKaBsKapBPDf53p+QKHAIcY5lAXRD3HHyP2AHbPL2Lay98pX121PpOteMdNqW6hW8mGsmCOxmJITSc2o",
	"hJ923nSMK/ej5zQtlGVVgmb8FNTZGPyJKvO+9faTdAxSfx4jJ3V+NinhfDWHF4/8l6ImcOHB7HTuHRuI",
	"Hk8PO4OPKomdzROqWN3nRjXZ/aRjoxO5/sbWnxTqXYy2T53KM+57N6uuxmP5oQtxv1FbA48H+5+dwt7/",
	"quCV+XmuCrhMyEI528JW+O1vVTEtzOUb8vrqHc3oD9DG432xWC1W6JpqQLJG0DV9uVgtXrqg241DtkTR",
	"GyaSqdOX4ykNvXPvH5hbwajUXb3B2DeKb12tKGlBujC6npi7bcvvxk9zww3uWHCmw+VuHCq85bs/eCV1",
	"rvy5Wj0JgG4YdAiiyWVIzWy+6e+1h+MpuQUNwzjnrqptXTO9HccZKSshkoAf9q16SsV+BHDsDq9eX+L+",
	"DUuWB08Ju+zkjuD9asZq/7S0+/qELB3OPwmKfGNFLTZtnoMxRVsd8jDE2MmgignBxeh1YMzD/sXhiSpi",
	"8qIxqyBePNr5bmhLVsC40Y0jO0TNfXDKs7xzbWDnXiraSKg/j9R1HOq9Yp+T8pi7X5+GokkneWbNmkFR",
	"d51YYI6/Wr1Kjwm4WCrrx7BDRgdypowugzeao1UUjHaxSurG6F+M4ujj1jNXYvxFKUF8f5twLWgo0Iew",
	"P+bPZ0CDs9f6Lt6+LjaQ/0OEvyAY0D9AE4G5SBiO+K2UQkbK/AptPrBcIq/EU48R/Inu8Bewym5Ijp54",
	"j4M0P9Kzk0keXhWfoXNPX+vnNHD/n4oZK90/2P6zA8T4xv7gGWIojN3u3wAAAP//naIr7pgcAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
